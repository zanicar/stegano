// Copyright 2018 Zanicar. All rights reserved.
// Utilizes a BSD-3 license. Refer to the included LICENSE file for details.

// Package png provides a steganography implementation that outputs PNG image
// steganograms. It accepts both JPEG and PNG images as input.
package png

import (
	"bytes"
	_ "image/jpeg"
	"testing"
)

func TestCalculateCapacity(t *testing.T) {
	type args struct {
		width       int
		height      int
		channels    int
		bitsPerByte int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "16x16_RGBA_1",
			args: args{16, 16, 4, 1},
			want: 128,
		},
		{
			name: "16x16_RGBA_2",
			args: args{16, 16, 4, 2},
			want: 256,
		},
		{
			name: "16x16_RGB_1",
			args: args{16, 16, 3, 1},
			want: 96,
		},
		{
			name: "16x16_RGB_2",
			args: args{16, 16, 3, 2},
			want: 192,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CalculateCapacity(tt.args.width, tt.args.height, tt.args.channels, tt.args.bitsPerByte); got != tt.want {
				t.Errorf("CalculateCapacity() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestSteganoPNG_Conceal(t *testing.T) {
	data := []byte("github.com/zanicar/stegano/png")
	img := []byte{137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16, 0, 0, 0, 16, 8, 6, 0, 0, 0, 31, 243, 255, 97, 0, 0, 1, 144, 73, 68, 65, 84, 56, 203, 149, 146, 205, 74, 28, 65, 20, 133, 191, 238, 170, 105, 26, 71, 134, 33, 136, 127, 76, 50, 11, 149, 64, 54, 62, 64, 8, 174, 146, 119, 24, 200, 38, 239, 20, 116, 227, 198, 77, 158, 32, 155, 44, 66, 226, 66, 16, 55, 137, 16, 16, 34, 66, 116, 140, 32, 38, 74, 144, 81, 168, 174, 170, 235, 98, 172, 178, 122, 116, 18, 114, 161, 185, 213, 52, 223, 185, 125, 110, 157, 172, 215, 235, 137, 115, 14, 231, 28, 214, 90, 172, 181, 84, 85, 21, 123, 122, 14, 223, 173, 181, 4, 70, 167, 96, 42, 240, 144, 72, 0, 67, 247, 222, 163, 255, 53, 53, 156, 83, 48, 60, 222, 123, 244, 40, 160, 166, 22, 40, 202, 54, 90, 132, 66, 4, 17, 240, 183, 93, 68, 56, 254, 242, 17, 103, 206, 241, 222, 215, 5, 170, 170, 194, 80, 48, 104, 62, 229, 251, 181, 66, 4, 64, 16, 160, 108, 207, 112, 173, 75, 212, 193, 14, 237, 203, 95, 136, 8, 34, 50, 20, 48, 198, 220, 121, 172, 174, 200, 119, 223, 177, 152, 248, 157, 122, 246, 156, 179, 230, 19, 78, 14, 118, 153, 252, 186, 129, 100, 25, 222, 251, 40, 146, 199, 233, 183, 66, 233, 194, 138, 246, 12, 178, 244, 146, 243, 195, 111, 148, 91, 171, 0, 53, 88, 68, 200, 141, 49, 17, 54, 198, 212, 150, 55, 251, 226, 53, 135, 63, 246, 97, 243, 45, 90, 235, 26, 40, 67, 143, 245, 37, 166, 87, 181, 244, 234, 13, 123, 71, 63, 169, 62, 175, 161, 148, 138, 158, 129, 8, 3, 195, 29, 140, 94, 211, 252, 242, 10, 199, 191, 7, 92, 125, 90, 39, 207, 243, 8, 165, 96, 168, 124, 52, 105, 229, 163, 57, 140, 106, 210, 255, 176, 138, 136, 144, 101, 217, 88, 24, 24, 6, 41, 141, 242, 244, 227, 5, 182, 223, 175, 211, 106, 181, 232, 116, 58, 247, 128, 126, 191, 95, 123, 207, 186, 221, 174, 132, 84, 21, 19, 147, 92, 156, 157, 226, 156, 139, 19, 211, 201, 74, 41, 180, 214, 245, 63, 72, 99, 57, 248, 115, 65, 163, 209, 64, 41, 117, 15, 30, 87, 81, 32, 108, 249, 111, 126, 199, 10, 140, 134, 227, 127, 234, 6, 210, 166, 232, 113, 2, 110, 65, 13, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130}
	xmg := []byte{137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16, 0, 0, 0, 16, 8, 2, 0, 0, 0, 144, 145, 104, 54, 0, 0, 1, 188, 73, 68, 65, 84, 120, 156, 100, 82, 77, 107, 83, 81, 16, 157, 251, 145, 24, 76, 121, 148, 82, 21, 37, 154, 69, 45, 130, 27, 127, 64, 23, 174, 244, 55, 212, 133, 11, 255, 147, 100, 213, 141, 27, 127, 129, 27, 23, 82, 92, 8, 226, 70, 11, 130, 162, 84, 208, 132, 130, 31, 85, 81, 211, 143, 59, 51, 103, 228, 222, 251, 154, 166, 237, 129, 132, 251, 222, 156, 51, 231, 204, 155, 27, 239, 173, 175, 51, 76, 147, 8, 18, 20, 204, 44, 34, 92, 80, 15, 137, 89, 84, 33, 162, 5, 81, 129, 252, 0, 209, 148, 95, 177, 240, 41, 141, 74, 210, 92, 65, 254, 1, 81, 10, 114, 77, 69, 4, 7, 41, 97, 158, 173, 42, 2, 21, 54, 163, 86, 48, 239, 30, 150, 87, 206, 159, 107, 132, 92, 215, 204, 140, 80, 254, 205, 108, 242, 250, 153, 253, 251, 37, 6, 154, 9, 114, 86, 234, 78, 251, 55, 62, 28, 118, 13, 154, 89, 68, 189, 197, 75, 251, 177, 23, 182, 95, 45, 254, 253, 97, 6, 79, 36, 64, 76, 41, 85, 7, 225, 61, 191, 245, 248, 122, 57, 169, 98, 249, 230, 218, 247, 254, 181, 157, 237, 173, 133, 55, 143, 204, 57, 192, 12, 32, 35, 223, 182, 47, 178, 86, 41, 28, 151, 46, 216, 234, 157, 159, 159, 223, 246, 94, 140, 136, 8, 168, 233, 200, 60, 197, 131, 148, 244, 104, 134, 50, 98, 30, 117, 184, 118, 255, 253, 167, 143, 244, 252, 97, 140, 209, 230, 64, 230, 35, 115, 210, 218, 183, 114, 85, 87, 239, 62, 120, 247, 101, 103, 127, 115, 20, 99, 176, 28, 4, 68, 117, 168, 108, 22, 69, 216, 10, 179, 178, 175, 220, 186, 61, 217, 157, 238, 109, 110, 120, 31, 0, 49, 242, 71, 212, 22, 158, 15, 57, 75, 74, 170, 222, 210, 229, 20, 250, 227, 167, 35, 51, 115, 142, 12, 206, 157, 100, 19, 81, 44, 141, 161, 200, 14, 23, 175, 174, 188, 124, 178, 209, 52, 205, 96, 48, 168, 101, 103, 4, 71, 147, 241, 120, 38, 112, 195, 225, 176, 236, 93, 122, 11, 205, 238, 183, 175, 170, 90, 51, 204, 146, 116, 98, 240, 33, 30, 59, 212, 43, 5, 216, 244, 207, 239, 110, 167, 163, 33, 204, 179, 75, 106, 239, 20, 230, 78, 10, 202, 215, 96, 37, 231, 78, 103, 206, 91, 160, 224, 8, 109, 193, 215, 43, 85, 86, 227, 29, 145, 59, 195, 207, 134, 56, 110, 243, 63, 0, 0, 255, 255, 150, 254, 226, 156, 29, 141, 94, 14, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130}
	tests := []struct {
		name    string
		wantW   []byte
		wantErr bool
	}{
		{
			name:    "concealer",
			wantW:   xmg,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := SteganoPNG{
				hcoder: [][]uint8{0: {1}, 1: {2}, 2: {3}, 3: {4}},
				hmap:   map[uint8]uint8{1: 0, 2: 1, 3: 2, 4: 3},
			}
			r := bytes.NewBuffer(img)
			w := &bytes.Buffer{}
			if err := s.Conceal(data, r, w); (err != nil) != tt.wantErr {
				t.Errorf("SteganoPNG.Conceal() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if gotW := w.Bytes(); !bytes.Equal(gotW, tt.wantW) {
				t.Errorf("SteganoPNG.Conceal() = %v, want %v", gotW, tt.wantW)
			}
		})
	}
}

func TestSteganoPNG_Reveal(t *testing.T) {
	xmg := []byte{137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 16, 0, 0, 0, 16, 8, 2, 0, 0, 0, 144, 145, 104, 54, 0, 0, 1, 188, 73, 68, 65, 84, 120, 156, 100, 82, 77, 107, 83, 81, 16, 157, 251, 145, 24, 76, 121, 148, 82, 21, 37, 154, 69, 45, 130, 27, 127, 64, 23, 174, 244, 55, 212, 133, 11, 255, 147, 100, 213, 141, 27, 127, 129, 27, 23, 82, 92, 8, 226, 70, 11, 130, 162, 84, 208, 132, 130, 31, 85, 81, 211, 143, 59, 51, 103, 228, 222, 251, 154, 166, 237, 129, 132, 251, 222, 156, 51, 231, 204, 155, 27, 239, 173, 175, 51, 76, 147, 8, 18, 20, 204, 44, 34, 92, 80, 15, 137, 89, 84, 33, 162, 5, 81, 129, 252, 0, 209, 148, 95, 177, 240, 41, 141, 74, 210, 92, 65, 254, 1, 81, 10, 114, 77, 69, 4, 7, 41, 97, 158, 173, 42, 2, 21, 54, 163, 86, 48, 239, 30, 150, 87, 206, 159, 107, 132, 92, 215, 204, 140, 80, 254, 205, 108, 242, 250, 153, 253, 251, 37, 6, 154, 9, 114, 86, 234, 78, 251, 55, 62, 28, 118, 13, 154, 89, 68, 189, 197, 75, 251, 177, 23, 182, 95, 45, 254, 253, 97, 6, 79, 36, 64, 76, 41, 85, 7, 225, 61, 191, 245, 248, 122, 57, 169, 98, 249, 230, 218, 247, 254, 181, 157, 237, 173, 133, 55, 143, 204, 57, 192, 12, 32, 35, 223, 182, 47, 178, 86, 41, 28, 151, 46, 216, 234, 157, 159, 159, 223, 246, 94, 140, 136, 8, 168, 233, 200, 60, 197, 131, 148, 244, 104, 134, 50, 98, 30, 117, 184, 118, 255, 253, 167, 143, 244, 252, 97, 140, 209, 230, 64, 230, 35, 115, 210, 218, 183, 114, 85, 87, 239, 62, 120, 247, 101, 103, 127, 115, 20, 99, 176, 28, 4, 68, 117, 168, 108, 22, 69, 216, 10, 179, 178, 175, 220, 186, 61, 217, 157, 238, 109, 110, 120, 31, 0, 49, 242, 71, 212, 22, 158, 15, 57, 75, 74, 170, 222, 210, 229, 20, 250, 227, 167, 35, 51, 115, 142, 12, 206, 157, 100, 19, 81, 44, 141, 161, 200, 14, 23, 175, 174, 188, 124, 178, 209, 52, 205, 96, 48, 168, 101, 103, 4, 71, 147, 241, 120, 38, 112, 195, 225, 176, 236, 93, 122, 11, 205, 238, 183, 175, 170, 90, 51, 204, 146, 116, 98, 240, 33, 30, 59, 212, 43, 5, 216, 244, 207, 239, 110, 167, 163, 33, 204, 179, 75, 106, 239, 20, 230, 78, 10, 202, 215, 96, 37, 231, 78, 103, 206, 91, 160, 224, 8, 109, 193, 215, 43, 85, 86, 227, 29, 145, 59, 195, 207, 134, 56, 110, 243, 63, 0, 0, 255, 255, 150, 254, 226, 156, 29, 141, 94, 14, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130}
	tests := []struct {
		name    string
		wantW   string
		wantErr bool
	}{
		{
			name:    "revealer",
			wantW:   "github.com/zanicar/stegano/png",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			s := SteganoPNG{
				hcoder: [][]uint8{0: {1}, 1: {2}, 2: {3}, 3: {4}},
				hmap:   map[uint8]uint8{1: 0, 2: 1, 3: 2, 4: 3},
			}
			r := bytes.NewBuffer(xmg)
			w := &bytes.Buffer{}
			if err := s.Reveal(r, w); (err != nil) != tt.wantErr {
				t.Errorf("SteganoPNG.Reveal() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if gotW := w.String(); gotW != tt.wantW {
				t.Errorf("SteganoPNG.Reveal() = %v, want %v", gotW, tt.wantW)
			}
		})
	}
}

func TestNew(t *testing.T) {
	tests := []struct {
		name string
	}{
		{
			name: "Initialization",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := New()
			//t.Logf("SteganoPNG: %v", got)
			if got.hcoder == nil {
				t.Errorf("SteganoPNG.hcoder is not initialized")
			}
			if got.hmap == nil {
				t.Errorf("SteganoPNG.hmap is not initialized")
			}
		})
	}
}
